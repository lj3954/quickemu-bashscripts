#!/bin/bash
fullExit() {
  rm -rf ~/Documents/VMs/.tmp
  exit
}
trap fullExit SIGINT
(( $(id -u) == 0 )) && { echo "Cannot run this script as root. Exiting."; exit; }
export PATH=$PATH:~/.local/bin/quickemu
command -v quickemu > /dev/null || { git clone https://github.com/quickemu-project/quickemu ~/.local/bin/quickemu 2>&1 > /dev/null && echo Installed quickemu in /home/$(whoami)/.local/bin/quickemu; }
if [ -d ~/.local/bin/quickemu ]; then
  git -C ~/.local/bin/quickemu pull 2>&1 | grep -q "changed" && echo Updated quickemu.
fi
mkdir ~/Documents/VMs 2> /dev/null && echo Created VMs folder at /home/$(whoami)/Documents/VMs.
rm -rf ~/Documents/VMs/.tmp; mkdir ~/Documents/VMs/.tmp
echo Available Operating Systems:
quickget PLACEHOLDER | tail -n +3; echo -e '\n'
read -p 'Enter an operating system: ' OS
osoutput=$(quickget $OS 2> ~/Documents/VMs/.tmp/erroroutput.txt)
if cat ~/Documents/VMs/.tmp/erroroutput.txt | grep -q "command not found" > /dev/null || ! echo $osoutput | grep -q ' - Releases: ' > /dev/null; then
	echo -e '\nFailure. Invalid OS.'
	fullExit
fi
echo "$osoutput" | tail -n +2
read -p 'Enter a release: ' Ver && echo "$osoutput" | grep -q $Ver || { echo 'Failure. Invalid release.'; fullExit; }
echo "$osoutput" | grep -q ' - Editions: ' && { read -p 'Enter an edition (Case Sensitive): ' Edition; echo "$osoutput" | grep -q $Edition || { echo 'Failure. Invalid edition.'; fullExit; }; }
releaseString="$OS $Ver${Edition:+ $Edition}"
if [[ -d ~/Documents/VMs/$releaseString ]]; then
	echo -e "VM already exists.\n1. Create a new revision.\n2. Launch the preexisting VM.\n3. Delete the preexisting VM, create a new one in it's place."
	read -p 'Choose an option: ' input
	if [[ $input = 1 ]]; then
		num=2
		while [[ -d "~/Documents/VMs/$releaseString - Revision $num" ]]; do
			num=$((num+1))
		done
		releaseString="$releaseString - Revision $num"
	elif [[ $input = 2 ]]; then
		cd ~/Documents/VMs/$releaseString
		quickemu -vm $OS-$Ver${Edition:+-$Edition}.conf
		fullExit
	elif [[ $input = 3 ]]; then
		read -p 'Are you sure? This will delete the preexisting VM. [y/N] ' delinput
		if [[ "${delinput,,}" == "y" ]] || [[ "${delinput,,}"  == "yes" ]]; then
			rm -rf ~/Documents/VMs/"$releaseString"
		else
			echo Exiting.
			fullExit
		fi
	else
		echo Invalid selection. Exiting.
		fullExit
	fi
fi
read -p '(OPTIONAL) Enter the disk size for this VM (in GB): ' diskSize
diskSize=$(echo "$diskSize" | tr -d '[[:alpha:]]')
read -p '(OPTIONAL) Enter the amount of RAM you would like to allocate (in GB): ' ramSize
ramSize=$(echo "$ramSize" | tr -d '[[:alpha:]]')
read -p '(OPTIONAL) Enter the number of CPU cores you would like to allocate: ' cpuCores
mkdir ~/Documents/VMs/"$releaseString" && cd ~/Documents/VMs/"$releaseString"
quickget ${OS,,} $Ver ${Edition:+$Edition}
[ -z $cpuCores ] ||  echo "cpu_cores=$cpuCores" >> ${OS,,}-$Ver${Edition:+-$Edition}.conf
[ -z $ramSize ] || echo "ram=$ramSize"G >> ${OS,,}-$Ver${Edition:+-$Edition}.conf
[ -z $diskSize ] || echo "disk_size=$diskSize"G >> ${OS,,}-$Ver${Edition:+-$Edition}.conf
quickemu -vm ${OS,,}-$Ver${Edition:+-$Edition}.conf
fullExit